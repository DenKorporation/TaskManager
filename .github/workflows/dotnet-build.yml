name: .NET Build & Test with Coverage

on:
  push:
    branches: [ "**" ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore server/TaskManager.sln

      - name: Build solution
        run: dotnet build server/TaskManager.sln --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
          mkdir -p TestResults

          TEST_PROJECTS=( $(find server/tests -name '*.csproj') )
          
          for proj in "${TEST_PROJECTS[@]}"
          do
            echo "Running tests for $proj"
            dotnet test "$proj" --configuration Release --no-build \
              /p:CollectCoverage=true \
              /p:CoverletOutput=TestResults/$(basename $proj .csproj).xml \
              /p:CoverletOutputFormat=cobertura
          done

      - name: Generate coverage report
        run: |
          ls -R TestResults

          if compgen -G "TestResults/*.xml" > /dev/null; then
            echo "Generating coverage report..."
            dotnet tool install --global dotnet-reportgenerator-globaltool
            reportgenerator -reports:"TestResults/*.xml" -targetdir:"TestResults/Report" -reporttypes:HtmlSummary,Cobertura
          else
            echo "No coverage reports found, skipping report generation."
          fi

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: TestResults/Report

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: TestResults/*.xml
          fail_ci_if_error: false